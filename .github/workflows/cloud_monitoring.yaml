name: Cloud Monitoring

on:
  push:
    branches:
      - master
  pull_request:
    paths:
      - ".github/workflows/cloud_monitoring.yaml"
      - "cloud-monitoring/**"

jobs:
  test_and_lint:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ 'ubuntu-22.04','ubuntu-latest' ]
        python-version: [ "3.12", "3.x" ]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: | 
          cd cloud-monitoring
          python -m pip install --upgrade pip
          # Install the package with all optional dependencies for testing
          pip install -e ".[test,dev]"

      - name: Check code formatting with Black
        run: |
          cd cloud-monitoring
          black --check --diff cloudMonitoring/ tests/

      - name: Analyse with pylint
        run: |
          cd cloud-monitoring
          pylint . --recursive=true

      - name: Run tests with Pytest
        run: |
          cd cloud-monitoring
          python -m pytest tests --cov-report xml:coverage.xml --cov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          files: cloud-chatops/coverage.xml

  build_and_push_dev_image:
    runs-on: ubuntu-latest
    needs: test_and_lint
    steps:
      - uses: actions/checkout@v4

      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Harbor
        uses: docker/login-action@v3
        with:
          registry: harbor.stfc.ac.uk
          username: ${{ secrets.STAGING_HARBOR_USERNAME }}
          password: ${{ secrets.STAGING_HARBOR_TOKEN }}

      - name: Set commit SHA for later
        id: commit_sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push to staging project
        uses: docker/build-push-action@v6
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          context: "{{defaultContext}}:cloud-monitoring"
          tags: "harbor.stfc.ac.uk/stfc-cloud-staging/cloud-monitoring:${{ steps.commit_sha.outputs.sha_short }}"

  build_and_push_prod_image:
    runs-on: ubuntu-latest
    needs: test_and_lint
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for tags

      - name: Check if relevant files changed
        id: changes
        run: |
          # check if any python package files have been changed
          CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} |  grep -E '^cloud-monitoring/(cloudMonitoring/.*|tests/.*|pyproject\.toml)$' || true)
          if [ -z "$CHANGED" ]; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Exit if no relevant changes
        if: steps.changes.outputs.changed == 'false'
        run: echo "No relevant changes, no version bump needed."

      - name: Get latest cloud-monitoring tag
        if: steps.changes.outputs.changed == 'true'
        id: get_tag
        run: |
          tag=$(git tag --list 'cloud-monitoring-*' | sort -V | tail -n 1)
          if [ -z "$tag" ]; then
            tag="cloud-monitoring-0.0.0"
          fi
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          version=$(grep -m1 '^version' cloud-monitoring/pyproject.toml | sed -E 's/version *= *"([^"]+)"/\1/')
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Check if bump is needed
        id: check_bump
        if: steps.changes.outputs.changed == 'true'
        run: |
          tag_version="${{ steps.get_tag.outputs.tag#cloud-monitoring- }}"
          current_version="${{ steps.get_version.outputs.version }}"

          if [ "$tag_version" = "$current_version" ]; then
            echo "same=true" >> "$GITHUB_OUTPUT"
          else
            echo "same=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Bump version (patch)
        if: steps.check_bump.outputs.same == 'true'
        uses: callowayproject/bump-my-version@master
        id: bump
        with:
          args: patch
          github-token: ${{ secrets.GITHUB_TOKEN }}
          workdir: cloud-monitoring

      - name: Refresh version after bump
        id: final_version
        run: |
          version=$(grep -m1 '^version' cloud-monitoring/pyproject.toml | sed -E 's/version *= *"([^"]+)"/\1/')
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Create tag for current version
        run: |
          version="${{ steps.final_version.outputs.version }}"
          tag_name="cloud-monitoring-${version}"

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Only tag if it doesn't already exist
          if git rev-parse "$tag_name" >/dev/null 2>&1; then
            echo "Tag $tag_name already exists. Skipping."
          else
            git tag "$tag_name"
            git push origin "$tag_name"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Harbor
        uses: docker/login-action@v3
        with:
          registry: harbor.stfc.ac.uk
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_TOKEN }}

      - name: Build and push on version change
        uses: docker/build-push-action@v6
        if: steps.release_updated.outputs.version == 'true'
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          context: "{{defaultContext}}:cloud-monitoring"
          tags: "harbor.stfc.ac.uk/stfc-cloud/cloud-monitoring:${{ steps.final_version.outputs.version }}"
